global
  daemon

  stats socket /var/run/haproxy.sock
  stats timeout 5m

defaults
  mode http

  timeout client 30s
  timeout server 30s
  timeout connect 5s
  timeout http-keep-alive 30s

### Example of binding to a single server within a group of servers :/
# This is the simple solution, but the user's session is bound to a single
# server rather than a selection of servers running the new build.

frontend foo
  bind :8080 tfo defer-accept

  default_backend app

backend app

  # pick a server/target build by weight, then stick user session to it
  balance roundrobin
  cookie appsrvid insert indirect nocache httponly

  default-server maxconn 1

  # build b has just been deployed, so gets a small amount of traffic
  server srv0-build-a ${SERVER} weight 90 cookie a0
  server srv1-build-a ${SERVER} weight 90 cookie a1
  server srv0-build-b ${SERVER} weight 10 cookie b0
  server srv1-build-b ${SERVER} weight 10 cookie b1

  # change server weight via the stats socket!
  #> set server app/srv0-build-b weight 15
  #> set server app/srv0-build-a weight 85

  http-response set-header Proudly-Served-By "%s"

  # need way to balance over multiple servers with a given cookie value

###
### Example of binding to a group of servers linked by a common release
###

frontend foo2
  bind :8081 tfo defer-accept

  default_backend app2

backend app2

  # pick a server/target build by weight, then stick user session to it
  balance roundrobin
  cookie apprel insert indirect nocache httponly

  http-response add-header Proudly-Served-By "%s"

  server srv-app2-build-a /var/run/haproxy-app2-build-a.sock send-proxy-v2 weight 90 cookie a
  server srv-app2-build-b /var/run/haproxy-app2-build-b.sock send-proxy-v2 weight 10 cookie b

listen app2-build-a
  bind /var/run/haproxy-app2-build-a.sock accept-proxy
  balance roundrobin
  default-server maxconn 1

  http-response add-header Proudly-Served-By "%s"

  server srv0-build-a ${SERVER}
  server srv1-build-a ${SERVER}

listen app2-build-b
  bind /var/run/haproxy-app2-build-b.sock accept-proxy
  balance roundrobin
  default-server maxconn 1

  http-response add-header Proudly-Served-By "%s"

  server srv0-build-b ${SERVER}
  server srv1-build-b ${SERVER}


### Didn't try: a backend per app-release. This obscures logging and alerting

listen stats
  stats enable
  stats refresh 2s
  stats show-desc "Application ${APP_NAME}"
  stats uri /
  bind :8181
